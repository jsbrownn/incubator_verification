//  MAP

//  Создает новый массив с результатами вызова указанной функции для каждого элемента массива.
const numbers = [1,2,3,4,];
const doubled = numbers.map(number => number * 2)
console.log ('результат вызова метода map = ' + doubled)
//результат вызова метода map = 2,4,6,8


//  FILTER
//  Создает новый массив с элементами, прошедшими проверку, заданную в передаваемой функции.

const evenNumbers = numbers.filter(number => number % 2 === 0) 
console.log('четные числа это ' + evenNumbers);
//четные числа это 2,4


//REDUCE
//Применяет функцию к каждому значению массива(слева направо), чтобы свести его к одному значению.

const sum = numbers.reduce((accum,currentValue) => accum + currentValue,0)
//где accum - аккамулятор, в который будут складываться результаты итерации по массиву,
//    currentValue - текущее значение элемента итерации,
//    0 - начальное значение аккамулятора.

console.log(sum)
//10

//  FOREACH
//  Вызывает функцию один раз для каждого элемента в массиве. В отличии от мар, не возвращает новый массив,
// а итерируется по искомому массиву.

numbers.forEach (num => console.log(num))
// в результате метод вызовет каждый элемент массива отдельной строкой в консоли.


//  FIND
//  Возвращает первый элемент массива, который соответствует заданному условию в передаваемой функции

const found = numbers.find( num => num > 2)
console.log(`Первое найденное число более 2  -  это ${found}`);
//Первое найденное число более 2  -  это 3


//  SOME
//  Проверяет, удовлетворяет ли хотя бы один элемент массива условию, заданному в передаваемой функции

const hasNegative = numbers.some(num => num < 0)
console.log(hasNegative)
//false

//   EVERY
//  Проверяет, удовлетворяют ли все элеметы массива условию, заданному в передаваемой функции.

const isAllPositive = numbers.every(num => num > 0 )
console.log(isAllPositive)
//true

//  SORT
//  возврещает отсортированный массив. Если функция сравнения не предоставлена, то метод сортирует массив в соответствии
//  со значениями кодовых точек каждого символа unicode, полученных путем преобразования каждого элемента в строку. 
//  например, 

console.log(`отсортированый массив по возрастанию кодовых точек Unicode : ${numbers.sort()}`)

numbers.sort((a, b) => a - b); // Сортировка по возрастанию

const items = [
  { name: "John", age: 25 },
  { name: "Anna", age: 20 },
  { name: "Bob", age: 30 }
];
items.sort((a, b) => a.age - b.age); // Сортировка по возрасту
// Результат: [{ name: "Anna", age: 20 }, { name: "John", age: 25 }, { name: "Bob", age: 30 }]


//  SLICE
//  возвращает выбранный фркгмент массива

const sliced =  numbers.slice(0,2)  // возвращает первые три элемента массива


//  также существует множество других методов, таких как 
numbers.shift()  //удаляет первый элемент из массива и возвращает его значение. 
//   Этот метод изменяет длину массива

numbers.unshift() // добавляет один или несколько элементов в начапло массива  возращает новую длинну массива.
numbers.pop()  // удаляет последний элемент массива и возвращает его значение.
numbers.push() // добаяет один етов в конец массива и возвращает новую длину массива.
numbers.reverse() // переварачивает массив